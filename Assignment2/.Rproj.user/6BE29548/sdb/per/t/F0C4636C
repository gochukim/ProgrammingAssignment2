{
    "contents" : "## Data Science - Programming Assignment 2: Cache Time-consuming Computations.\n## This program will write an R function that is able to cache potentially \n## time-consuming computations.\n\n## makeVector creates a special \"vector\", which is really a list containing a \n## function to:\n## 1. set the value of the vector\n## 2. get the value of the vector\n## 3. set the value of the mean\n## 4. get the value of the mean\n\nmakeVector <- function(x = numeric()) {\n        m <- NULL\n        set <- function(y) {\n                x <<- y\n                m <<- NULL\n        }\n        get <- function() x\n        setmean <- function(mean) m <<- mean\n        getmean <- function() m\n        list(set = set, get = get,\n             setmean = setmean,\n             getmean = getmean)\n}\n\n## cachemean function calculates the mean of the special \"vector\" created with \n## the above function. \n\ncachemean <- function(x, ...) {\n        m <- x$getmean()\n        if(!is.null(m)) {\n                message(\"getting cached data\")\n                return(m)\n        }\n        data <- x$get()\n        m <- mean(data, ...)\n        x$setmean(m)\n        m\n}\n\n## makeCacheMAtrix function creates a special \"matrix\" object that can cache its\n## inverse.\n## 1. set the value of the matrix\n## 2. get the value of the matrix\n## 3. set the value of the inverse\n## 4. get the value of the inverse\n\nmakeCacheMatrix <- function(x = matrix()) {\n        m <- NULL\n        set <- function(y){\n                x <<- y\n                i <<- NULL\n        }\n        get <- function() x\n        setmatrix <- function(inverse) m <<- inverse\n        getmatrix <- function() m\n        list(set = set, get = get,\n             setmatrix = setmatrix,\n             getmatrix = getmatrix)\n}\n\n## cacheSolve function computes the inverse of the special \"matrix\" returned by \n## makeCacheMatrix above.\n## If the inverse has already been calculated (and the matrix has not changed), \n## then the cachesolve should retrieve the inverse from the cache.\n\ncacheSolve <- function(x, ...) {\n        ## Return a matrix that is the inverse of 'x'\n        m <- x$getmatrix()\n        if(!is.null(m)) {\n                message(\"getting cached data\")\n                return(m)\n        }\n        matrix <- x$get()\n        m <- inverse(matrix, ...) \n        x$setmatrix(m)\n        m\n}\n",
    "created" : 1406407882311.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1933735091",
    "id" : "F0C4636C",
    "lastKnownWriteTime" : 1406407967,
    "path" : "~/Coursera/R Programming/ProgrammingAssignment2/cachematrix.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}